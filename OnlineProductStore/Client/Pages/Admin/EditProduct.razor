@page "/admin/product"
@page "/admin/product/{id:int}"
@inject IProductService _productService
@inject ICategoryService _categoryService
@inject NavigationManager _navigationManager
@inject IJSRuntime _jsRuntime

@if (loading)
{
    <span>@msg</span>
}
else
{
    @if (product.Editing)
    {
        <h3>Edit "@product.Title"</h3>
    }
    else if (product.IsNew)
    {
        <h3>Create a new Product</h3>
    }

    <EditForm Model="product" OnValidSubmit="AddOrUpdateProduct">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <div class="mb-0">
            <label for="title">Title</label>
            <InputText id="title" @bind-Value="product.Title" class="form-control"></InputText>
        </div>
        <div class="mb-0">
            <label for="imageUrl">Image Url</label>
            <InputText id="imageUrl" @bind-Value="product.ImageUrl" class="form-control"></InputText>
        </div>
        <div class="mb-0">
            <label for="Price">Price</label>
            <InputNumber id="price" @bind-Value="product.Price" class="form-control"></InputNumber>
        </div>
        <div class="mb-0">
            <img src="@product.ImageUrl" />
        </div>
        <div class="mb-0">
            <label for="description">Description</label>
            <InputTextArea id="description" @bind-Value="product.Description" class="form-control"></InputTextArea>
        </div>

        <hr />
        <div class="mb-0">
            <label for="category">Category</label>
            <InputSelect id="category" @bind-Value="product.CategoryId" class="form-control">
                @foreach (var category in _categoryService.AdminCategories)
                {
                    <option value="@category.Id">@category.Name</option>
                }
            </InputSelect>
        </div>
        <hr />
        <div class="form-check">
            <InputCheckbox id="visible" @bind-Value="product.Visible" class="form-check-input"></InputCheckbox>
            <label for="visible" class="form-check-label">Visible</label>
        </div>
        <hr />
        <button type="submit" class="btn btn-primary float-end">@btnText</button>
        <ValidationSummary></ValidationSummary>
    </EditForm>
    @if (!product.IsNew)
    {
        <button type="button" class="btn btn-danger float-start" @onclick="DeleteProduct">
            Delete Product
        </button>
    }
}

@code {
    [Parameter]
    public int Id { get; set; }

    Product product = new Product();
    bool loading = true;
    string btnText = "";
    string msg = "Loading...";

    protected override async Task OnInitializedAsync()
    {
        await _categoryService.GetAdminCategories();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id == 0)
        {
            product = new Product { IsNew = true };
            btnText = "Create Product";
        }
        else
        {
            Product dbProduct = (await _productService.GetProductById(Id)).Data;
            if (dbProduct == null)
            {
                msg = $"Product with Id '{Id}' does not exist!";
                return;
            }
            product = dbProduct;
            product.Editing = true;
            btnText = "Update Product";
        }
        loading = false;
    }

    async void AddOrUpdateProduct()
    {
        if (product.IsNew)
        {
            var result = await _productService.CreateProduct(product);
            _navigationManager.NavigateTo($"admin/product/{result.Id}");
        }
        else
        {
            product.IsNew = false;
            product = await _productService.UpdateProduct(product);
            _navigationManager.NavigateTo($"admin/product/{product.Id}", true);
        }
    }

    async void DeleteProduct()
    {
        bool confirmed = await _jsRuntime.InvokeAsync<bool>("confirm",
            $"Do you really want to delete '{product.Title}'?");
        if (confirmed)
        {
            await _productService.DeleteProduct(product);
            _navigationManager.NavigateTo("admin/products");
        }
    }
}